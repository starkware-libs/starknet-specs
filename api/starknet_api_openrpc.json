{
    "openrpc": "1.0.0-rc1",
    "info": {
        "version": "0.16.0",
        "title": "StarkNet Node API",
        "license": {}
    },
    "servers": [],
    "methods": [
        {
            "name": "starknet_getBlockByHash",
            "summary": "Get block information given the block id",
            "params": [
                {
                    "name": "block_hash",
                    "description": "The hash (id) of the requested block, or a block tag",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BLOCK_HASH_OR_TAG"
                    }
                },
                {
                    "name": "requested_scope",
                    "description": "The scope of the block information requested. Defaults to txn hashes only",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/BLOCK_RESPONSE_SCOPE_OPTIONS"
                    }
                }
            ],
            "result": {
                "name": "result",
                "description": "The resulting block information",
                "schema": {
                    "oneOf": [
                        {
                            "$ref": "#/components/schemas/BLOCK"
                        },
                        {
                            "$ref": "#/components/schemas/PENDING_BLOCK"
                        }
                    ]
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/INVALID_BLOCK_HASH"
                }
            ]
        },
        {
            "name": "starknet_getBlockByNumber",
            "summary": "Get block information given the block number (its height)",
            "params": [
                {
                    "name": "block_number",
                    "summary": "The requested block number",
                    "description": "The number (height) of the requested block or a block tag",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BLOCK_NUM_OR_TAG"
                    }
                },
                {
                    "name": "requested_scope",
                    "description": "The scope of the block information requested. Defaults to txn hashes only",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/BLOCK_RESPONSE_SCOPE_OPTIONS"
                    }
                }
            ],
            "result": {
                "name": "result",
                "description": "The resulting block information",
                "schema": {
                    "oneOf": [
                        {
                            "$ref": "#/components/schemas/BLOCK"
                        },
                        {
                            "$ref": "#/components/schemas/PENDING_BLOCK"
                        }
                    ]
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/INVALID_BLOCK_NUMBER"
                }
            ]
        },
        {
            "name": "starknet_getStateUpdateByHash",
            "summary": "Get the information about the result of executing the requested block",
            "params": [
                {
                    "name": "block_hash",
                    "description": "The hash (id) of the requested block, or a block tag referencing the necessary block",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BLOCK_HASH_OR_TAG"
                    }
                }
            ],
            "result": {
                "name": "result",
                "description": "The information about the state update of the requested block",
                "schema": {
                    "$ref": "#/components/schemas/STATE_UPDATE"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/INVALID_BLOCK_HASH"
                }
            ]
        },
        {
            "name": "starknet_getStorageAt",
            "summary": "Get the value of the storage at the given address and key",
            "params": [
                {
                    "name": "contract_address",
                    "description": "The address of the contract to read from",
                    "summary": "The address of the contract to read from",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ADDRESS"
                    }
                },
                {
                    "name": "key",
                    "description": "The key to the storage value for the given contract",
                    "summary": "The key to the storage value for the given contract",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/FELT"
                    }
                },
                {
                    "name": "block_hash",
                    "description": "The hash (id) of the requested block or a tag referencing the necessary block",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BLOCK_HASH_OR_TAG"
                    }
                }
            ],
            "result": {
                "name": "result",
                "description": "The value at the given key for the given contract. 0 if no value is found",
                "summary": "The value at the given key for the given contract.",
                "schema": {
                    "$ref": "#/components/schemas/FELT"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/CONTRACT_NOT_FOUND"
                },
                {
                    "$ref": "#/components/errors/INVALID_STORAGE_KEY"
                },
                {
                    "$ref": "#/components/errors/INVALID_BLOCK_HASH"
                }
            ]
        },
        {
            "name": "starknet_getTransactionByHash",
            "summary": "Get the details and status of a submitted transaction",
            "paramStructure": "by-name",
            "params": [
                {
                    "name": "transaction_hash",
                    "summary": "The hash of the requested transaction",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/TXN_HASH"
                    }
                }
            ],
            "result": {
                "name": "result",
                "schema": {
                    "$ref": "#/components/schemas/TXN"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/INVALID_TXN_HASH"
                }
            ]
        },
        {
            "name": "starknet_getTransactionByBlockHashAndIndex",
            "summary": "Get the details of a transaction by a given block hash and index",
            "description": "Get the details of the transaction given by the identified block and index in that block. If no transaction is found, null is returned.",
            "params": [
                {
                    "name": "block_hash",
                    "summary": "The queried block hash or tag referencing a block",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BLOCK_HASH_OR_TAG"
                    }
                },
                {
                    "name": "index",
                    "summary": "The index in the block to search for the transaction",
                    "required": true,
                    "schema": {
                        "type": "integer",
                        "minimum": 0
                    }
                }
            ],
            "result": {
                "name": "transactionResult",
                "schema": {
                    "$ref": "#/components/schemas/TXN"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/INVALID_BLOCK_HASH"
                },
                {
                    "$ref": "#/components/errors/INVALID_TXN_INDEX"
                }
            ]
        },
        {
            "name": "starknet_getTransactionByBlockNumberAndIndex",
            "summary": "Get the details of a transaction by a given block number and index",
            "description": "Get the details of the transaction given by the identified block and index in that block. If no transaction is found, null is returned.",
            "params": [
                {
                    "name": "block_number",
                    "summary": "The queried block number or a block tag",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BLOCK_NUM_OR_TAG"
                    }
                },
                {
                    "name": "index",
                    "summary": "The index in the block to search for the transaction",
                    "required": true,
                    "schema": {
                        "type": "integer",
                        "minimum": 0
                    }
                }
            ],
            "result": {
                "name": "transactionResult",
                "schema": {
                    "$ref": "#/components/schemas/TXN"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/INVALID_BLOCK_NUMBER"
                },
                {
                    "$ref": "#/components/errors/INVALID_TXN_INDEX"
                }
            ]
        },
        {
            "name": "starknet_getTransactionReceipt",
            "summary": "Get the transaction receipt by the transaction hash",
            "paramStructure": "by-name",
            "params": [
                {
                    "name": "transaction_hash",
                    "summary": "The hash of the requested transaction",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/TXN_HASH"
                    }
                }
            ],
            "result": {
                "name": "result",
                "schema": {
                    "$ref": "#/components/schemas/TXN_RECEIPT"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/INVALID_TXN_HASH"
                }
            ]
        },
        {
            "name": "starknet_getClass",
            "summary": "Get the contract class definition associated with the given hash",
            "params": [
                {
                    "name": "class_hash",
                    "description": "The hash of the requested contract class",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/FELT"
                    }
                }
            ],
            "result": {
                "name": "result",
                "description": "The contract class, if found",
                "schema": {
                    "$ref": "#/components/schemas/CONTRACT_CLASS"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/INVALID_CONTRACT_CLASS_HASH"
                }
            ]
        },
        {
            "name": "starknet_getClassHashAt",
            "summary": "Get the contract class hash for the contract deployed at the given address",
            "params": [
                {
                    "name": "contract_address",
                    "description": "The address of the contract whose class hash will be returned",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ADDRESS"
                    }
                }
            ],
            "result": {
                "name": "result",
                "description": "The class hash of the given contract",
                "schema": {
                    "$ref": "#/components/schemas/FELT"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/CONTRACT_NOT_FOUND"
                }
            ]
        },
        {
            "name": "starknet_getClassAt",
            "summary": "Get the contract class definition at the given address",
            "params": [
                {
                    "name": "contract_address",
                    "description": "The address of the contract whose class definition will be returned",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ADDRESS"
                    }
                }
            ],
            "result": {
                "name": "result",
                "description": "The contract class",
                "schema": {
                    "$ref": "#/components/schemas/CONTRACT_CLASS"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/CONTRACT_NOT_FOUND"
                }
            ]
        },
        {
            "name": "starknet_getBlockTransactionCountByHash",
            "summary": "Get the number of transactions in a block given a block hash",
            "description": "Returns the number of transactions in the designated block.",
            "params": [
                {
                    "name": "block_hash",
                    "summary": "The hash of the requested block",
                    "description": "The hash of the block to query or a tag referencing a block",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BLOCK_HASH_OR_TAG"
                    }
                }
            ],
            "result": {
                "name": "result",
                "description": "The number of transactions in the designated block",
                "summary": "The number of transactions in the designated block",
                "schema": {
                    "type": "integer",
                    "minimum": 0
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/INVALID_BLOCK_HASH"
                }
            ]
        },
        {
            "name": "starknet_getBlockTransactionCountByNumber",
            "summary": "Get the number of transactions in a block given a block number (height)",
            "description": "Returns the number of transactions in the designated block.",
            "params": [
                {
                    "name": "block_number",
                    "summary": "The number (height) of the requested block",
                    "description": "The number of the block to query or a tag referencing a block",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BLOCK_NUM_OR_TAG"
                    }
                }
            ],
            "result": {
                "name": "result",
                "description": "The number of transactions in the designated block",
                "summary": "The number of transactions in the designated block",
                "schema": {
                    "type": "integer",
                    "minimum": 0
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/INVALID_BLOCK_NUMBER"
                }
            ]
        },
        {
            "name": "starknet_call",
            "summary": "call a starknet function without creating a StarkNet transaction",
            "description": "Calls a function in a contract and returns the return value.  Using this call will not create a transaction; hence, will not change the state",
            "params": [
                {
                    "name": "request",
                    "summary": "The details of the function call",
                    "schema": {
                        "$ref": "#/components/schemas/FUNCTION_CALL"
                    },
                    "required": true
                },
                {
                    "name": "block_hash",
                    "description": "The hash (id) of the requested block or a block tag, for the block referencing the state or call the transaction on.",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BLOCK_HASH_OR_TAG"
                    }
                }
            ],
            "result": {
                "name": "result",
                "summary": "The function's return value",
                "description": "The function's return value, as defined in the Cairo output",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/FELT"
                    }
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/CONTRACT_NOT_FOUND"
                },
                {
                    "$ref": "#/components/errors/INVALID_MESSAGE_SELECTOR"
                },
                {
                    "$ref": "#/components/errors/INVALID_CALL_DATA"
                },
                {
                    "$ref": "#/components/errors/CONTRACT_ERROR"
                },
                {
                    "$ref": "#/components/errors/INVALID_BLOCK_HASH"
                }
            ]
        },
        {
            "name": "starknet_estimateFee",
            "summary": "estimate the fee for a given StarkNet transaction",
            "description": "estimates the resources required by a transaction relative to a given state",
            "params": [
                {
                    "name": "request",
                    "summary": "The details of the function call",
                    "schema": {
                        "$ref": "#/components/schemas/FUNCTION_CALL"
                    },
                    "required": true
                },
                {
                    "name": "block_hash",
                    "description": "The hash (id) of the requested block or a block tag, for the block referencing the state or call the transaction on.",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BLOCK_HASH_OR_TAG"
                    }
                }
            ],
            "result": {
                "name": "result",
                "description": "the fee estimation",
                "schema": {
                    "$ref": "#/components/schemas/FEE_ESTIMATE"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/CONTRACT_NOT_FOUND"
                },
                {
                    "$ref": "#/components/errors/INVALID_MESSAGE_SELECTOR"
                },
                {
                    "$ref": "#/components/errors/INVALID_CALL_DATA"
                },
                {
                    "$ref": "#/components/errors/CONTRACT_ERROR"
                },
                {
                    "$ref": "#/components/errors/INVALID_BLOCK_HASH"
                }
            ]
        },
        {
            "name": "starknet_blockNumber",
            "summary": "Get the most recent accepted block number",
            "params": [],
            "result": {
                "name": "result",
                "description": "The latest block number",
                "schema": {
                    "$ref": "#/components/schemas/BLOCK_NUMBER"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/NO_BLOCKS"
                }
            ]
        },
        {
            "name": "starknet_chainId",
            "summary": "Return the currently configured StarkNet chain id",
            "params": [],
            "result": {
                "name": "result",
                "description": "The chain id this node is connected to",
                "schema": {
                    "$ref": "#/components/schemas/CHAIN_ID"
                }
            }
        },
        {
            "name": "starknet_pendingTransactions",
            "summary": "Returns the transactions in the transaction pool, recognized by this sequencer",
            "params": [],
            "result": {
                "name": "result",
                "schema": {
                    "type": "array",
                    "title": "Pending Transactions",
                    "items": {
                        "$ref": "#/components/schemas/TXN"
                    }
                }
            }
        },
        {
            "name": "starknet_protocolVersion",
            "summary": "Returns the current starknet protocol version identifier, as supported by this sequencer",
            "params": [],
            "result": {
                "name": "protocolVersion",
                "summary": "The protocol version",
                "description": "The protocol version currently supported by this sequencer",
                "schema": {
                    "$ref": "#/components/schemas/PROTOCOL_VERSION"
                }
            }
        },
        {
            "name": "starknet_syncing",
            "summary": "Returns an object about the sync status, or false if the node is not synching",
            "params": [],
            "result": {
                "name": "syncing",
                "summary": "The state of the synchronization, or false if the node is not synchronizing",
                "description": "The status of the node, if it is currently synchronizing state. FALSE otherwise",
                "schema": {
                    "oneOf": [
                        {
                            "type": "boolean",
                            "description": "only legal value is FALSE here"
                        },
                        {
                            "$ref": "#/components/schemas/SYNC_STATUS"
                        }
                    ]
                }
            }
        },
        {
            "name": "starknet_getEvents",
            "summary": "Returns all events matching the given filter",
            "description": "Returns all event objects matching the conditions in the provided filter",
            "params": [
                {
                    "name": "filter",
                    "summary": "The conditions used to filter the returned events",
                    "required": true,
                    "schema": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EVENT_FILTER"
                            },
                            {
                                "$ref": "#/components/schemas/RESULT_PAGE_REQUEST"
                            }
                        ]
                    }
                }
            ],
            "result": {
                "name": "events",
                "description": "All the event objects matching the filter",
                "schema": {
                    "type": "object",
                    "properties": {
                        "events": {
                            "type": "array",
                            "title": "Matching Events",
                            "items": {
                                "$ref": "#/components/schemas/EMITTED_EVENT"
                            }
                        },
                        "page_number": {
                            "title": "Page Number",
                            "description": "The returned page number.",
                            "type": "integer"
                        },
                        "is_last_page": {
                            "title": "Is Last Page",
                            "description": "A flag indicating whether this is the end of the stream of events",
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "events",
                        "page_number",
                        "is_last_page"
                    ]
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/PAGE_SIZE_TOO_BIG"
                }
            ]
        },
        {
            "name": "starknet_getNonce",
            "summary": "Get the latest nonce associated with the given address",
            "params": [
                {
                    "name": "contract_address",
                    "description": "The address of the contract whose nonce we're seeking",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ADDRESS"
                    }
                }
            ],
            "result": {
                "name": "result",
                "description": "The last nonce used for the given contract.",
                "schema": {
                    "$ref": "#/components/schemas/FELT"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/CONTRACT_NOT_FOUND"
                }
            ]
        }
    ],
    "components": {
        "contentDescriptors": {},
        "schemas": {
            "BLOCK_RESPONSE_SCOPE_OPTIONS": {
                "title": "Options for block information requests",
                "type": "string",
                "enum": [
                    "TXN_HASH",
                    "FULL_TXNS",
                    "FULL_TXN_AND_RECEIPTS"
                ]
            },
            "RESULT_PAGE_REQUEST": {
                "title": "A request for a specific page of results",
                "description": "A specification of a result page to retrieve",
                "type": "object",
                "properties": {
                    "page_size": {
                        "type": "integer",
                        "minimum": 1
                    },
                    "page_number": {
                        "type": "integer",
                        "minimum": 1
                    }
                },
                "required": [
                    "page_size",
                    "page_number"
                ]
            },
            "EMITTED_EVENT": {
                "title": "An event emitted as a result of transaction execution",
                "description": "Event information decorated with metadata on where it was emitted",
                "allOf": [
                    {
                        "title": "The event information",
                        "$ref": "#/components/schemas/EVENT"
                    },
                    {
                        "title": "The event emission information",
                        "type": "object",
                        "properties": {
                            "block_hash": {
                                "title": "The hash of the block in which the event was emitted",
                                "$ref": "#/components/schemas/BLOCK_HASH"
                            },
                            "block_number": {
                                "title": "The number of the block in which the event was emitted",
                                "$ref": "#/components/schemas/BLOCK_NUMBER"
                            },
                            "transaction_hash": {
                                "title": "The transaction that emitted the event",
                                "$ref": "#/components/schemas/TXN_HASH"
                            }
                        }
                    }
                ]
            },
            "EVENT": {
                "title": "A StarkNet event",
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "from_address": {
                                "$ref": "#/components/schemas/ADDRESS"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/EVENT_CONTENT"
                    }
                ]
            },
            "EVENT_CONTENT": {
                "title": "Event Content",
                "description": "The content of an event",
                "type": "object",
                "properties": {
                    "keys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FELT"
                        }
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FELT"
                        }
                    }
                }
            },
            "EVENT_FILTER": {
                "title": "An event filter/query",
                "type": "object",
                "properties": {
                    "fromBlock": {
                        "title": "from block",
                        "$ref": "#/components/schemas/BLOCK_NUM_OR_TAG"
                    },
                    "toBlock": {
                        "title": "to block",
                        "$ref": "#/components/schemas/BLOCK_NUM_OR_TAG"
                    },
                    "address": {
                        "title": "from contract",
                        "$ref": "#/components/schemas/ADDRESS"
                    },
                    "keys": {
                        "title": "filter key values",
                        "description": "The values used to filter the events",
                        "type": "array",
                        "items": {
                            "title": "event key value",
                            "$ref": "#/components/schemas/FELT"
                        }
                    }
                }
            },
            "BLOCK_HASH_OR_TAG": {
                "title": "Block hash or tag",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BLOCK_HASH"
                    },
                    {
                        "$ref": "#/components/schemas/BLOCK_TAG"
                    }
                ]
            },
            "BLOCK_NUM_OR_TAG": {
                "title": "Block number or tag",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BLOCK_NUMBER"
                    },
                    {
                        "$ref": "#/components/schemas/BLOCK_TAG"
                    }
                ]
            },
            "BLOCK_TAG": {
                "type": "string",
                "description": "A tag specifying a dynamic reference to a block",
                "enum": [
                    "latest",
                    "pending"
                ]
            },
            "SYNC_STATUS": {
                "type": "object",
                "description": "An object describing the node synchronization status",
                "properties": {
                    "starting_block_hash": {
                        "description": "The hash of the block from which the sync started",
                        "$ref": "#/components/schemas/BLOCK_HASH"
                    },
                    "starting_block_num": {
                        "description": "The number (height) of the block from which the sync started",
                        "$ref": "#/components/schemas/NUM_AS_HEX"
                    },
                    "current_block_hash": {
                        "description": "The hash of the current block being synchronized",
                        "$ref": "#/components/schemas/BLOCK_HASH"
                    },
                    "current_block_num": {
                        "description": "The number (height) of the current block being synchronized",
                        "$ref": "#/components/schemas/NUM_AS_HEX"
                    },
                    "highest_block_hash": {
                        "description": "The hash of the estimated highest block to be synchronized",
                        "$ref": "#/components/schemas/BLOCK_HASH"
                    },
                    "highest_block_num": {
                        "description": "The number (height) of the estimated highest block to be synchronized",
                        "$ref": "#/components/schemas/NUM_AS_HEX"
                    }
                }
            },
            "NUM_AS_HEX": {
                "title": "An integer number in hex format (0x...)",
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]+$"
            },
            "PROTOCOL_VERSION": {
                "title": "protocolVersion",
                "description": "StarkNet protocol version, given in hex representation.",
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]+$"
            },
            "CHAIN_ID": {
                "title": "chainId",
                "description": "StarkNet chain id, given in hex representation.",
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]+$"
            },
            "STATE_UPDATE": {
                "type": "object",
                "properties": {
                    "block_hash": {
                        "$ref": "#/components/schemas/BLOCK_HASH"
                    },
                    "new_root": {
                        "description": "The new global state root",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "old_root": {
                        "description": "The previous global state root",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "accepted_time": {
                        "description": "When the block was accepted on L1. Formatted as... ",
                        "type": "integer",
                        "minimum": 0
                    },
                    "state_diff": {
                        "description": "The change in state applied in this block, given as a mapping of addresses to the new values and/or new contracts",
                        "type": "object",
                        "properties": {
                            "storage_diffs": {
                                "type": "array",
                                "items": {
                                    "description": "A change in a single storage item",
                                    "$ref": "#/components/schemas/STATE_DIFF_ITEM"
                                }
                            },
                            "contracts": {
                                "type": "array",
                                "items": {
                                    "description": "A new contract added as part of the new state",
                                    "$ref": "#/components/schemas/CONTRACT_ITEM"
                                }
                            },
                            "nonces": {
                                "type": "array",
                                "items": {
                                    "description": "The updated nonce per contract address",
                                    "type": "object",
                                    "properties": {
                                        "contract_address": {
                                            "description": "The address of the contract",
                                            "$ref": "#/components/schemas/ADDRESS"
                                        },
                                        "nonce": {
                                            "description": "The nonce for the given address at the end of the block",
                                            "$ref": "#/components/schemas/FELT"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ADDRESS": {
                "$ref": "#/components/schemas/FELT"
            },
            "ETH_ADDRESS": {
                "type": "string",
                "$comment": "An ethereum address",
                "description": "an ethereum address represented as 40 hex digits",
                "pattern": "^0x[a-fA-F0-9]{40}$"
            },
            "TXN_HASH": {
                "$ref": "#/components/schemas/FELT",
                "description": "The transaction hash, as assigned in StarkNet",
                "title": "A transaction's hash"
            },
            "FELT": {
                "type": "string",
                "title": "Field element",
                "$comment": "A field element, represented as a string of hex digits",
                "description": "A field element. Represented as up to 63 hex digits and leading 4 bits zeroed.",
                "pattern": "^0x0[a-fA-F0-9]{1,63}$"
            },
            "BLOCK_NUMBER": {
                "description": "The block's number (its height)",
                "type": "integer",
                "minimum": 0
            },
            "BLOCK_HASH": {
                "$ref": "#/components/schemas/FELT"
            },
            "BLOCK_BODY": {
                "transactions": {
                    "oneOf": [
                        {
                            "description": "The hashes of the transactions included in this block",
                            "type": "array",
                            "items": {
                                "description": "The hash of a single transaction",
                                "$ref": "#/components/schemas/TXN_HASH"
                            }
                        },
                        {
                            "description": "The transactions in this block",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/TXN"
                            }
                        },
                        {
                            "description": "The transactions in this block + their receipts",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/TXN_OBJECT_AND_RECEIPT"
                            }
                        }
                    ]
                }
            },
            "BLOCK_HEADER": {
                "block_hash": {
                    "$ref": "#/components/schemas/BLOCK_HASH"
                },
                "parent_hash": {
                    "description": "The hash of this block's parent",
                    "$ref": "#/components/schemas/BLOCK_HASH"
                },
                "block_number": {
                    "description": "The block number (its height)",
                    "$ref": "#/components/schemas/BLOCK_NUMBER"
                },
                "new_root": {
                    "description": "The new global state root",
                    "$ref": "#/components/schemas/FELT"
                },
                "timestamp": {
                    "description": "The time in which the block was created, encoded in Unix time",
                    "type": "integer",
                    "minimum": 0
                },
                "sequencer_address": {
                    "description": "The StarkNet identity of the sequencer submitting this block",
                    "$ref": "#/components/schemas/FELT"
                }
            },
            "BLOCK": {
                "title": "The block object",
                "allOf": [
                    {
                        "status": {
                            "$ref": "#/components/schemas/BLOCK_STATUS"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/BLOCK_HEADER"
                    },
                    {
                        "$ref": "#/components/schemas/BLOCK_BODY"
                    }
                ]
            },
            "PENDING_BLOCK": {
                "description": "The dynamic block being constructed by the sequencer. Note that this object will be deprecated upon decentralization.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BLOCK_BODY"
                    },
                    {
                        "timestamp": {
                            "description": "The time in which the block was created, encoded in Unix time",
                            "type": "integer",
                            "minimum": 0
                        }
                    },
                    {
                        "sequencer_address": {
                            "description": "The StarkNet identity of the sequencer submitting this block",
                            "$ref": "#/components/schemas/FELT"
                        }
                    },
                    {
                        "parent_hash": {
                            "description": "The hash of this block's parent",
                            "$ref": "#/components/schemas/BLOCK_HASH"
                        }
                    }
                ]
            },
            "CONTRACT_ITEM": {
                "type": "object",
                "properties": {
                    "address": {
                        "description": "The address of the contract",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "contract_hash": {
                        "description": "The hash of the contract code",
                        "$ref": "#/components/schemas/FELT"
                    }
                }
            },
            "STATE_DIFF_ITEM": {
                "type": "object",
                "properties": {
                    "address": {
                        "description": "The contract address for which the state changed",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "key": {
                        "description": "The key of the changed value",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "value": {
                        "description": "The new value applied to the given address",
                        "$ref": "#/components/schemas/FELT"
                    }
                }
            },
            "TXN_OBJECT_AND_RECEIPT": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TXN"
                    },
                    {
                        "$ref": "#/components/schemas/TXN_RECEIPT"
                    }
                ]
            },
            "TXN": {
                "title": "Transaction",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/INVOKE_TXN"
                    },
                    {
                        "$ref": "#/components/schemas/DECLARE_TXN"
                    }
                ]
            },
            "SIGNATURE": {
                "title": "A transaction signature",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/FELT"
                }
            },
            "COMMON_TXN_PROPERTIES": {
                "type": "object",
                "properties": {
                    "txn_hash": {
                        "$ref": "#/components/schemas/TXN_HASH",
                        "description": "The hash identifying the transaction"
                    },
                    "max_fee": {
                        "$ref": "#/components/schemas/FELT",
                        "description": "The maximal fee that can be charged for including the transaction"
                    },
                    "version": {
                        "description": "Version of the transaction scheme",
                        "$ref": "#/components/schemas/NUM_AS_HEX"
                    },
                    "signature": {
                        "$ref": "#/components/schemas/SIGNATURE"
                    },
                    "nonce": {
                        "$ref": "#/components/schemas/FELT"
                    }
                }
            },
            "DECLARE_TXN": {
                "title": "Declare Contract Transaction",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/COMMON_TXN_PROPERTIES"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "contract_class": {
                                "description": "The class to be delcared",
                                "$ref": "#/components/schemas/CONTRACT_CLASS"
                            },
                            "sender_address": {
                                "description": "The address of the account contract sending the declaration transaction",
                                "$ref": "#/components/schemas/ADDRESS"
                            }
                        }
                    }
                ]
            },
            "INVOKE_TXN": {
                "title": "Invoke Contract Transaction",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/COMMON_TXN_PROPERTIES"
                    },
                    {
                        "$ref": "#/components/schemas/FUNCTION_CALL",
                        "description": "The function the transaction invokes"
                    }
                ]
            },
            "COMMON_RECEIPT_PROPERTIES": {
                "title": "Common properties for a transaction receipt",
                "type": "object",
                "properties": {
                    "txn_hash": {
                        "$ref": "#/components/schemas/TXN_HASH",
                        "description": "The hash identifying the transaction"
                    },
                    "actual_fee": {
                        "$ref": "#/components/schemas/FELT",
                        "description": "The fee that was charged by the sequencer"
                    },
                    "status": {
                        "$ref": "#/components/schemas/TXN_STATUS"
                    },
                    "statusData": {
                        "type": "string",
                        "description": "Extra information pertaining to the status"
                    }
                },
                "required": [
                    "txn_hash",
                    "actual_fee",
                    "status"
                ]
            },
            "INVOKE_TXN_RECEIPT": {
                "title": "Invoke Transaction Receipt",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/COMMON_RECEIPT_PROPERTIES"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "messages_sent": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/MSG_TO_L1"
                                }
                            },
                            "l1_origin_message": {
                                "description": "In case this transaction was an L1 handler, this is the original message that invoked it",
                                "$ref": "#/components/schemas/MSG_TO_L2"
                            },
                            "events": {
                                "description": "The events emitted as part of this transaction",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EVENT"
                                }
                            }
                        },
                        "required": [
                            "messages_sent",
                            "events"
                        ]
                    }
                ]
            },
            "DECLARE_TXN_RECEIPT": {
                "title": "Declare Transaction Receipt",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/COMMON_RECEIPT_PROPERTIES"
                    }
                ]
            },
            "TXN_RECEIPT": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/INVOKE_TXN_RECEIPT"
                    },
                    {
                        "$ref": "#/components/schemas/DECLARE_TXN_RECEIPT"
                    }
                ]
            },
            "MSG_TO_L1": {
                "type": "object",
                "properties": {
                    "to_address": {
                        "description": "The target L1 address the message is sent to",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "payload": {
                        "description": "The payload of the message",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FELT"
                        }
                    }
                }
            },
            "MSG_TO_L2": {
                "type": "object",
                "properties": {
                    "from_address": {
                        "description": "The originating L1 contract that sent the message",
                        "$ref": "#/components/schemas/ETH_ADDRESS"
                    },
                    "payload": {
                        "description": "The payload of the meesage. The call data to the L1 handler",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FELT"
                        }
                    }
                }
            },
            "TXN_STATUS": {
                "type": "string",
                "enum": [
                    "UNKNOWN",
                    "RECEIVED",
                    "PENDING",
                    "ACCEPTED_ON_L2",
                    "ACCEPTED_ON_L1",
                    "REJECTED"
                ],
                "description": "The status of the transaction. May be unknown in case node is not aware of it"
            },
            "BLOCK_STATUS": {
                "type": "string",
                "enum": [
                    "PENDING",
                    "PROVEN",
                    "ACCEPTED_ON_L2",
                    "ACCEPTED_ON_L1",
                    "REJECTED"
                ],
                "description": "The status of the block"
            },
            "FUNCTION_CALL": {
                "type": "object",
                "title": "Function call information",
                "properties": {
                    "contract_address": {
                        "$ref": "#/components/schemas/ADDRESS"
                    },
                    "entry_point_selector": {
                        "$ref": "#/components/schemas/FELT"
                    },
                    "calldata": {
                        "type": "array",
                        "description": "The parameters passed to the function",
                        "items": {
                            "$ref": "#/components/schemas/FELT"
                        }
                    }
                }
            },
            "CONTRACT_CLASS": {
                "title": "The definition of a StarkNet contract class",
                "type": "object",
                "properties": {
                    "program": {
                        "type": "string",
                        "description": "A base64 representation of the compressed program code",
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$"
                    },
                    "entry_points_by_type": {
                        "type": "object",
                        "properties": {
                            "CONSTRUCTOR": {
                                "schema": {
                                    "$ref": "#/components/schemas/CONTRACT_ENTRY_POINT_LIST"
                                }
                            },
                            "EXTERNAL": {
                                "schema": {
                                    "$ref": "#/components/schemas/CONTRACT_ENTRY_POINT_LIST"
                                }
                            },
                            "L1_HANDLER": {
                                "schema": {
                                    "$ref": "#/components/schemas/CONTRACT_ENTRY_POINT_LIST"
                                }
                            }
                        }
                    }
                }
            },
            "CONTRACT_ENTRY_POINT_LIST": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CONTRACT_ENTRY_POINT"
                }
            },
            "CONTRACT_ENTRY_POINT": {
                "type": "object",
                "properties": {
                    "offset": {
                        "description": "The offset of the entry point in the program",
                        "schema": {
                            "$ref": "#/components/schemas/NUM_AS_HEX"
                        }
                    },
                    "selector": {
                        "description": "A unique identifier of the entry point (function) in the program",
                        "schema": {
                            "$ref": "#/components/schemas/FELT"
                        }
                    }
                }
            },
            "FEE_ESTIMATE": {
                "type": "object",
                "properties": {
                    "gas_consumed": {
                        "description": "The Ethereum gas cost of the transaction (see https://docs.starknet.io/docs/Fees/fee-mechanism for more info)",
                        "schema": {
                            "$ref": "#/components/schemas/NUM_AS_HEX"
                        }
                    },
                    "gas_price": {
                        "description": "The gas price (in gwei) that was used in the cost estimation",
                        "schema": {
                            "$ref": "#/components/schemas/NUM_AS_HEX"
                        }
                    },
                    "overall_fee": {
                        "description": "The estimated fee for the transaction (in gwei), product of gas_consumed and gas_price",
                        "schema": {
                            "$ref": "#/components/schemas/NUM_AS_HEX"
                        }
                    }
                }
            }
        },
        "errors": {
            "FAILED_TO_RECEIVE_TXN": {
                "code": 1,
                "message": "Failed to write transaction"
            },
            "CONTRACT_NOT_FOUND": {
                "code": 20,
                "message": "Contract not found"
            },
            "INVALID_MESSAGE_SELECTOR": {
                "code": 21,
                "message": "Invalid message selector"
            },
            "INVALID_CALL_DATA": {
                "code": 22,
                "message": "Invalid call data"
            },
            "INVALID_STORAGE_KEY": {
                "code": 23,
                "message": "Invalid storage key"
            },
            "INVALID_BLOCK_HASH": {
                "code": 24,
                "message": "Invalid block hash"
            },
            "INVALID_TXN_HASH": {
                "code": 25,
                "message": "Invalid transaction hash"
            },
            "INVALID_BLOCK_NUMBER": {
                "code": 26,
                "message": "Invalid block number"
            },
            "INVALID_TXN_INDEX": {
                "code": 27,
                "message": "Invalid transaction index in a block"
            },
            "INVALID_CONTRACT_CLASS_HASH": {
                "code": 28,
                "message": "The supplied contract class hash is invalid or unknown"
            },
            "PAGE_SIZE_TOO_BIG": {
                "code": 31,
                "message": "Requested page size is too big"
            },
            "NO_BLOCKS": {
                "code": 32,
                "message": "There are no blocks"
            },
            "CONTRACT_ERROR": {
                "code": 40,
                "message": "Contract error"
            }
        }
    }
}
